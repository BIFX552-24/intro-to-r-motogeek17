---
title: "Vectorization"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 9](https://swcarpentry.github.io/r-novice-gapminder/09-vectorization.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use vectroized options instead of loops
:::

```{r}
library(gapminder)
data(gapminder)

library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())

library(magrittr)
```

#### Challenge 1

Make a new column in the `gapminder` data frame that contains population in units of millions of people. Check the head or tail of the data frame to make sure it worked.

<!-- Challenge 1 answer begin -->

```{r}
gapminder$pop_mil <- gapminder$pop / 1e6
head(gapminder)
tail(gapminder)
```

<!-- Challenge 1 answer end -->

#### Challenge 2a

On a single graph, plot population, in millions, against year, for all countries. Do not worry about identifying which country is which.

<!-- Challenge 2a answer begin -->

```{r}
ggplot(gapminder, aes(x = year, y = pop_mil)) +
  geom_point() +
  labs(x = 'Year',
       y = 'Population (millions)')
```

<!-- Challenge 2a answer end -->

#### Challenge 2b

Repeat the exercise, graphing only for China, India, and Indonesia. Again, do not worry about which is which.

<!-- Challenge 2b answer begin -->

```{r}
country_top <- c('China', 'India', 'Indonesia')
ggplot(gapminder[gapminder$country %in% country_top,],
       aes(x = year, y = pop_mil)) +
  geom_point(color = 'orange') +
  labs(x = 'Year',
       y = 'Population (millions)',
       title = 'Top Most Populated Countries')

# gapminder[gapminder$country %in% c('China', 'India', 'Indonesia'),] %>%
#   ggplot(aes(year, pop_mil)) +
#   geom_point(color = 'green') +
#   labs(x = 'Year',
#        y = 'Population (millions)',
#        title = 'Top Most Populated Countries')
```

<!-- Challenge 2b answer end -->

#### Challenge 3

Given the following matrix:

```{r}
m <- matrix(1:12, nrow=3, ncol=4)
m
```

Write down what you think will happen when you run:

-   `m ^ -1`
-   `m * c(1, 0, -1)`
-   `m > c(0, 20)`
-   `m * c(1, 0, -1, 2)`

Did you get the output you expected? If not and the video didn't clear things up, let me know and we can discuss.

-   `m ^ -1` divides 1 by all the values in m
-   `m * c(1, 0, -1)` will recycle the values in the vector on the right, resulting in row 1 being multiplied by 1, row two multiplied by 0, and row 3 multiplied by -1.
-   `m > c(0, 20)` will recycle the values in the vector on the right. The values in m will be compared one column at a time. Since it is of length 2, this will not result in the same comparison being made across each row.
-   `m * c(1, 0, -1, 2)` will recycle the values in the vector on the right. Row 1 will go through the first three numbers. Row 2 will start at 2 and cycle back around, continuing down the column to the next column.

<!-- Challenge 3 answer end -->

#### Challenge 4a

We're interested in looking at the sum of the following sequence of fractions:

```         
x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)
```

This would be tedious to type out, and impossible for high values of $n$. Use vectorization to compute $x$ when $n=100$.

<!-- Challenge 4a answer begin -->

```{r}
sum(1 / (1:100)^2)
```

<!-- Challenge 4a answer end -->

#### Challenge 4b

What is the sum when $n=10,000$?

<!-- Challenge 4b answer begin -->

```{r}
sum(1 / (1:1e4)^2)

# n <- 1e4
# sum(1 / (1:n)^2)
```

<!-- Challenge 4b answer end -->
